import { jsfxr } from '../lib/jsfxr';

// thanks https://codepen.io/jackrugile/post/arcade-audio-for-js13k-games
export class ArcadeAudio {
    constructor() {
        this.sounds = {};
        this.volume = 1;

        this.add('shoot', 5,
            [
                [1, , 0.299, 0.271, 0.28, 0.336, 0.067, -0.487, , , , , , 0.062, 0.176, , 0.052, -0.041, 1, , , 0.264, , 0.2],
                [1, , 0.299, 0.271, 0.28, 0.336, 0.067, -0.4, , , , , , 0.062, 0.176, , 0.052, -0.041, 1, , , 0.264, , 0.2],
                // [,, 0.0639, , 0.2425, 0.7582, , -0.6217, , , , , , 0.4039, , , , , 1, , , , , 0.25],
                // [3, , 0.0138, , 0.2701, 0.4935, , -0.6881, , , , , , , , , , , 1, , , , , 0.25],


                // [2, , 0.2, , 0.1753, 0.64, , -0.5261, , , , , , 0.5522, -0.564, , , , 1, , , , , 0.25],

                // [3, , 0.0948, , 0.2116, 0.7188, , -0.6372, , , , , , , , , , , 1, , , 0.2236, , 0.25],
                // [3, , 0.1606, 0.5988, 0.2957, 0.1157, , -0.3921, , , , , , , , , 0.3225, -0.2522, 1, , , , , 0.25],
                // [3, , 0.1726, 0.2496, 0.2116, 0.0623, , -0.2096, , , , , , , , , 0.2665, -0.1459, 1, , , , , 0.25],
                // [3, , 0.1645, 0.7236, 0.3402, 0.0317, , , , , , , , , , , , , 1, , , , , 0.25]
            ]
        );

        this.add('hit', 3, [
            [, , 0.232, 0.236, 0.299, 0.326, 0.019, -0.595, , , , , , 0.402, 0.078, , , , 1, , , 0.163, , 0.5],
        ]);

        this.add('explosion', 3, [
            [3, , 0.106, 0.613, 0.304, 0.143, , -0.306, , , , -0.632, 0.801, , , , , , 1, , , , , 0.5],
        ]);
        this.add('coin', 3, [
            [1, , 0.095, 0.451, 0.26, 0.645, , , , , , 0.299, 0.665, , , , , , 1, , , , , 0.5],
        ]);
        this.add('pickup', 3, [
            // [, , 0.294, , 0.434, 0.241, , 0.167, , , , , , 0.104, , , , , 1, , , , , 0.4], // level up
            [, , 0.355, , 0.618, 0.263, , 0.491, , 0.191, 0.278, , 0.095, 0.372, , 0.56, , , 1, , , , , 0.4], // level up (long)
        ]);

        this.add('death', 1, [
            [3, , 0.173, 0.291, 0.491, 0.03, , 0.105, , 0.134, 0.217, 0.131, , , , , 0.531, -0.21, 1, 0.227, , , , 0.6], // death2
        ]);
        this.add('enter_spectral', 3, [
            // [,,0.294, ,0.434, 0.241, ,0.167, ,,,,,0.104, ,,,,1, ,,,,0.25],
            // [1, ,0.139, ,0.336, 0.424, ,0.299, ,,,,,1, ,0.563, ,,1, ,,,,0.3], // switching
            [, , 0.141, , 0.425, 0.262, , 0.377, , , , , , 0.197, , 0.463, , , 1, , , , , 0.5], // switch form

            // [3, ,0.173, 0.291, 0.491, 0.03, ,0.105, ,0.134, 0.217, 0.131, ,,,,0.531, -0.21, 1, 0.227, ,,,0.6], // death2
        ]);
        this.add('respawn', 1, [
            // [,,0.355, ,0.379, 0.263, ,0.491, ,,,,,0.372, ,0.56, ,,1, ,,,,0.5], // level up
            // [, , 0.355, , 0.618, 0.263, , 0.491, , 0.191, 0.278, , 0.095, 0.372, , 0.56, , , 1, , , , , 0.4], // level up (long)
            [, , 0.294, , 0.434, 0.241, , 0.167, , , , , , 0.104, , , , , 1, , , , , 0.4], // level up
        ]);
        this.add('game_over', 1, [
            [1, 0.154, 0.561, 0.114, 0.557, 0.248, , -0.042, -0.046, 0.441, 0.292, 0.705, 0.643, 0.076, -0.082, 0.312, -0.264, 0.032, 0.237, -0.087, 0.253, 0.33, -0.593, 0.3], // game over
        ]);

        this.add('test', 3, [
            // [3, 0.162, 0.282, 0.019, 0.622, 0.503, ,-0.188, -0.001, -0.298, 0.77, -0.772, 0.009, -0.555, 0.748, 0.741, -0.138, -0.019, 0.796, -0.507, -0.259, 0.147, ,0.121], // RPG sound
            // [3, ,0.173, 0.291, 0.491, 0.03, ,0.105, ,0.134, 0.217, ,,,,,0.38, -0.11, 1, ,,,,0.5], // death
            // [3, ,0.173, 0.291, 0.491, 0.03, ,0.105, ,0.134, 0.217, 0.131, ,,,,0.531, -0.21, 1, 0.227, ,,,0.6], // death2
            // [,,0.124, ,0.319, 0.291, ,0.439, ,,,,,0.496, ,0.568, ,,1, ,,,,0.4], // reborn!
            // [1, 0.154, 0.561, 0.114, 0.557, 0.248, ,-0.042, -0.046, 0.441, 0.292, 0.705, 0.643, 0.076, -0.082, 0.312, -0.264, 0.032, 0.237, -0.087, 0.253, 0.33, -0.593, 0.3], // game over
            // [,,0.355, ,0.379, 0.263, ,0.491, ,,,,,0.372, ,0.56, ,,1, ,,,,0.5], // level up
            [, , 0.355, , 0.618, 0.263, , 0.491, , 0.191, 0.278, , 0.095, 0.372, , 0.56, , , 1, , , , , 0.5], // level up (long)

            // [1, ,0.139, ,0.336, 0.424, ,0.299, ,,,,,1, ,0.563, ,,1, ,,,,0.3], // switching
            // [,,0.141, ,0.425, 0.262, ,0.377, ,,,,,0.197, ,0.463, ,,1, ,,,,0.5], // switch form
        ]);
    }

    add(key, allowAtSameTime, settings) {
        this.sounds[key] = [];
        settings.forEach((elem, index) => {
            this.sounds[key].push({
                tick: 0,
                count: allowAtSameTime,
                pool: []
            });
            for (var i = 0; i < allowAtSameTime; i++) {
                var audio = new Audio();
                audio.src = jsfxr(elem);
                this.sounds[key][index].pool.push(audio);
            }
        });
    }

    play(key, volume = this.volume) {
        var sound = this.sounds[key];
        var soundData = sound.length > 1 ? sound[(Math.random() * sound.length) | 0] : sound[0];
        soundData.pool[soundData.tick].volume = volume;
        soundData.pool[soundData.tick].play().catch(e => {/* do nothing */ });
        // soundData.tick < soundData.count - 1 ? soundData.tick++ : soundData.tick = 0;
        soundData.tick = (soundData.tick + 1) % soundData.count;
    }
}